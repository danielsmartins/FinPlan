generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvestmentType {
  RENDA_FIXA
  ACAO_BR
  ACAO_EUA
  FII
  BDR
  ETF
  CRIPTOMOEDA
  OUTRO
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())

  transactions Transaction[]
  categories   Category[]
  investments  Investment[]
  budgets      Budget[]
  creditCards  CreditCard[]
}

model CreditCard {
  id          String @id @default(uuid())
  name        String
  closingDay  Int
  dueDay      Int
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
}

model Category {
  id   String @id @default(uuid())
  name String
  icon String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  budgets      Budget[]
}

model Transaction {
  id         String   @id @default(uuid())
  userId     String
  type       String
  title      String
  amount     Float
  date       DateTime
  createdAt  DateTime @default(now())
  status     String   @default("PAID") // PAID | PENDING

  //RECORRÊNCIA 
  isRecurring    Boolean @default(false)
  recurrenceType String? // Ex: 'MONTHLY', 'YEARLY'

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  creditCardId String?
  creditCard   CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)
}

model Investment {
  id        String   @id @default(uuid()) // Mantive seu uuid
  name      String   // Ex: "Tesouro Selic 2029" ou "Magazine Luiza"
  ticker    String   // Ex: "LFTSEL29" ou "MGLU3"
  type      InvestmentType 
  quantity  Float    // Quantidade de cotas/ações
  averageCost Float  @map("average_cost") // Preço médio de compra por unidade
  currentPrice Float @map("current_price") // A cotação atual

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("investments")
}

model Budget {
  id         String @id @default(uuid())
  userId     String
  amount     Float
  month      Int
  year       Int
  categoryId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, month, year])
}
