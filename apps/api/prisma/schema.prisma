generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())

  transactions Transaction[]
  categories   Category[]
  investments  Investment[]
  budgets      Budget[]
  creditCards  CreditCard[] // Adicionado
}

// ---> NOVO MODELO PARA CARTÃO DE CRÉDITO <---
model CreditCard {
  id          String @id @default(uuid())
  name        String // Ex: "Nubank", "Inter"
  closingDay  Int    // Dia do fechamento da fatura (1-31)
  dueDay      Int    // Dia do vencimento da fatura (1-31)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
}

model Category {
  id   String @id @default(uuid())
  name String
  icon String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  budgets      Budget[]
}

model Transaction {
  id         String   @id @default(uuid())
  userId     String
  type       String   // "INCOME" ou "EXPENSE"
  title      String
  amount     Float
  date       DateTime
  createdAt  DateTime @default(now())
  status     String   @default("PAID")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  // ---> CAMPO NOVO ADICIONADO <---
  // Para vincular uma despesa a um cartão de crédito
  creditCardId String?
  creditCard   CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)
}

model Investment {
  id          String   @id @default(uuid())
  userId      String
  description String
  value       Float
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id         String @id @default(uuid())
  userId     String
  amount     Float
  month      Int
  year       Int
  categoryId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, month, year])
}
