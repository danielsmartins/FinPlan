generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())

  transactions Transaction[]
  categories   Category[]
  investments  Investment[] // Adicionado
  budgets      Budget[]     // Adicionado
}

model Category {
  id   String @id @default(uuid())
  name String
  icon String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  budgets      Budget[]      // Adicionado
}

model Transaction {
  id         String   @id @default(uuid())
  userId     String
  type       String   // "INCOME" ou "EXPENSE"
  title      String
  amount     Float
  date       DateTime
  createdAt  DateTime @default(now())
  
  // ---> CAMPO NOVO ADICIONADO <---
  // Usaremos para diferenciar transações pagas das previstas.
  status     String   @default("PAID") // Ex: "PAID" | "PENDING"

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

// ---> NOVO MODELO PARA INVESTIMENTOS <---
model Investment {
  id          String   @id @default(uuid())
  userId      String
  description String   // Ex: "Ações na NuInvest", "Tesouro Direto"
  value       Float    // O valor atual do investimento
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ---> NOVO MODELO PARA ORÇAMENTO <---
model Budget {
  id         String @id @default(uuid())
  userId     String
  amount     Float  // O valor orçado para o mês
  month      Int    // Mês (1-12)
  year       Int    // Ano (ex: 2025)
  categoryId String // O orçamento é por categoria

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Garante que o usuário só pode ter um orçamento por categoria/mês
  @@unique([userId, categoryId, month, year])
}
